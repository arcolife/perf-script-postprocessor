{"name":"Perf-script-postprocessor","tagline":"Read perf.data (created by perf record) and process trace output to display delta","body":"# perf-script-postprocessor\r\n\r\nThis calculates delta (difference of timestamps from various\r\nentry/exit points from events recorded) from the trace output,\r\nwhich is produced by using the `perf script` command, which in turn,\r\nuses the perf.data file produced by using the `perf record` command,\r\na set of utilities,which is provided under the package [perf-tools](https://github.com/brendangregg/perf-tools)\r\n\r\n## INSTALLATION\r\n\r\n`$ sudo ./install`\r\n\r\n## USAGE\r\n\r\n```\r\n$ perf_script_processor <dir path>\r\n```\r\n\r\n`<dir path>` is where one of the following exists:\r\n\r\n- perf.data -- binary file. If you're running this tool on perf.data, make sure\r\n\t\tyou're running it from the system where the binary was generated\r\n- raw_perf -- plain text output when `perf script` is run on folder containing perf.data\r\n- perf_data.csv -- generated in the process of generating results\r\n\r\n#### EXPLANATION \r\n\r\n`perf_scirpt_processor` calls a python script `delta_processor` with options set to default as follows:\r\n\r\n```delta_processor -i ${DUMP_PATH%/}/perf_data.csv -o $DUMP_PATH -m 3```\r\n\r\nHowever if you wanna use the `delta_processor` script directly, to utilize more options, use it like this:\r\n\r\n```\r\nDUMP_PATH='/tmp/pp_results/'\r\n\r\ndelta_processor --input=$DUMP_PATH'/perf_data.csv' --output=$DUMP_PATH --conf=<conf path> --mode=<0,1,2,3>\r\n\r\n```\r\n\r\n* Either set an env var DUMP_PATH as you would like it to be \r\n  and use that throughout the session, or supply a custom path.. \r\n  Just ensure that script has write permssions to the folder.\r\n\r\n* Generate delta of events for data from `perf script`[3]. \r\n  \r\n\r\n* This script runs in 3 modes. Those being:\r\n\r\n    - `Mode 0`: Produce `delta_processed.csv` with __all events together__[2].\r\n    - `Mode 1`: In addition to mode 0, this calculates __loop statistics__[1].\r\n    - `Mode 2`: breakup result into __per-event calculated delta csv files__.\r\n    - `Mode 3`: only calculates __loop statistics__ (from perf_data.csv).\r\n\r\n* [1] Set this in `/etc/delta_processor.conf`. Default is as below:\r\n\r\n```\r\n[Pattern] \r\n\r\n# native\r\norder = kvm_exit sys_exit_ppoll sys_enter_io_submit sys_exit_io_submit\r\n\r\n# thread\r\n# order = kvm_exit sys_exit_ppoll sys_enter_pread64 sys_exit_pread64\r\n```\r\n\r\n* [2] Events are like this:\r\n\t\r\n\t```\r\n\t\tkvm___\r\n\t\tsched_switch\r\n\t\tsys__futex\r\n\t\tsys__io_getevents\r\n\t\tsys__io_submit\r\n\t\tsys__ppoll\r\n\t\tsys__pwrite64\r\n\t\tsys__pwritev\r\n\t```\r\n\t\r\n\tFor detailed list, refer this [perf.txt](https://gist.githubusercontent.com/staticfloat/ad064cd6ae653f2afba7/raw/324a81a7423dd94226bd7ad3d1035a517612720f/perf.txt)\t\r\n\r\n* [3] Check more options for script through `$ delta_processor -h`\r\n\r\nNote: \r\nperf_data.csv is produced by using the perf_script_processor command.\r\nThis is incase, one has already produced the csv file from a previous run\r\nof postprocessor script.\r\n\r\n## FAQ\r\n\r\n* Why are graphs not generated for the results?\r\n\r\n\tThe flame graphs can be generated for such a dataset. Refer to [this blog](http://www.brendangregg.com/perf.html#FlameGraphs). But if one needs to see\r\n\tthe y axis points, well they're really present in a huge amount, ofcourse,\r\n\twhich could be handled through analytical methods later on. But for now,\r\n\tthis doesn't support such analysis. (given the number of loops in resultant data). \r\n\tHence we leave it to only producing a delta in a csv file.\r\n\r\n* How much time does it take for the tool to generate results?\r\n\r\n\tDepends on the size of your extracted data (plain text) from perf.data. \r\n\tFor a 1.5 Gb raw_perf, the script takes about 40-45 secs on an Intel model \r\n\t`name\t: Intel(R) Xeon(R) CPU X5365  @ 3.00GHz`. \r\n\r\n* How do I know the script isn't stuck and is actually running?\r\n\r\n\tThe script at the beginning of the test, in a few sec, would produce an stdout like this\r\n\t```\r\n\tUnique metrics found:\r\n\t  sys__ppoll\r\n\t  sys__pread64\r\n\t  kvm___\r\n\t```\r\n\t\r\n\tThis means the data has been loaded, and keys have been processed. It then calls\r\n\tthe `prepare_delta()` method which processed loop deltas. The result of that would \r\n\tadd on to the stdout like this:\r\n\t\r\n\t```\r\n\t **********************\r\n\t delta:exit_ppoll__kvm_exit stats:\r\n\t  Standard Dev: xxx\r\n\t  Mean: xxx\r\n\t  Median: xxx\r\n\t ======================\r\n\t delta:enter_pread64__exit_ppoll stats:\r\n\t  Standard Dev: xxx\r\n\t  Mean: xxx\r\n\t  Median: xxx\r\n\t ======================\r\n\t delta:exit_pread64__enter_pread64 stats:\r\n\t  Standard Dev: xxx\r\n\t  Mean: xxx\r\n\t  Median: xxx\r\n\t ======================\r\n\t Script was executed with Mode option 3.\r\n\t Results have been stored to: thread/\r\n\t Time taken -- prepare_delta() -- 41.4485499859\r\n\t```\r\n\tIn addition, it will produce a\t`loop_diff.csv` and a `perf_data.csv` in the output dir.\r\n\t\r\n\tIf it doesn't, Well :shit: . \r\n\r\n## LICENSE\r\n\r\nGPL V3\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/arcolife/perf-script-postprocessor/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}